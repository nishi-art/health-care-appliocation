{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayuto\\\\github\\\\health-care-application\\\\frontend\\\\src\\\\compornent\\\\WeightGraph.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WeightGraph = () => {\n  _s();\n  const currentYear = new Date().getFullYear();\n  const currentMonth = new Date().getMonth() + 1;\n  const years = [currentYear + 1, currentYear, currentYear - 1, currentYear - 2];\n  const months = Array.from({\n    length: 12\n  }, (_, i) => i + 1);\n  const [selectedYear, setSelectedYear] = useState(JSON.parse(localStorage.getItem('WeCoSeletedYear') || currentYear));\n  const [selectedMonth, setSelectedMonth] = useState(JSON.parse(localStorage.getItem('WeCoSelectedMonth') || currentMonth));\n  const [weightData, setWeightData] = useState({});\n  const token = localStorage.getItem('token');\n  const handleSelectYear = e => {\n    setSelectedYear(Number(e.target.value));\n  };\n  const handleSelectMonth = e => {\n    setSelectedMonth(Number(e.target.value));\n  };\n  const fetchMonthlyWeightMemos = async () => {\n    try {\n      const response = await fetch(`http://127.0.0.1:8000/users/weight/list?year=${selectedYear}&month=${selectedMonth}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (!response.ok) throw new Error('グラフのデータ取得に失敗しました。');\n      const weightMap = {};\n      const data = await response.json();\n      data.forEach(item => {\n        weightMap[item.day] = item.weight;\n      });\n      setWeightData(weightMap);\n    } catch (error) {\n      alert(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weight-graph\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-year-month\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"select-year\",\n          size: \"1\",\n          value: selectedYear,\n          onChange: handleSelectYear,\n          children: years.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: year\n          }, year, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"select-month\",\n          size: \"1\",\n          value: selectedMonth,\n          onChange: handleSelectMonth,\n          children: months.map(month => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: month,\n            children: month\n          }, month, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(WeightGraph, \"vc8KVlLyq7E3ZNk9DfZAgS4lCMk=\");\n_c = WeightGraph;\nexport default WeightGraph;\nvar _c;\n$RefreshReg$(_c, \"WeightGraph\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","WeightGraph","_s","currentYear","Date","getFullYear","currentMonth","getMonth","years","months","Array","from","length","_","i","selectedYear","setSelectedYear","JSON","parse","localStorage","getItem","selectedMonth","setSelectedMonth","weightData","setWeightData","token","handleSelectYear","e","Number","target","value","handleSelectMonth","fetchMonthlyWeightMemos","response","fetch","headers","ok","Error","weightMap","data","json","forEach","item","day","weight","error","alert","message","children","className","size","onChange","map","year","fileName","_jsxFileName","lineNumber","columnNumber","month","_c","$RefreshReg$"],"sources":["C:/Users/ayuto/github/health-care-application/frontend/src/compornent/WeightGraph.js"],"sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst WeightGraph = () => {\r\n    const currentYear = new Date().getFullYear();\r\n    const currentMonth = new Date().getMonth() + 1;\r\n    const years = [currentYear+1, currentYear, currentYear-1, currentYear-2];\r\n    const months = Array.from({length: 12}, (_,i)=>i+1);\r\n    const [selectedYear, setSelectedYear] = useState(\r\n        JSON.parse(localStorage.getItem('WeCoSeletedYear') || currentYear));\r\n    const [selectedMonth, setSelectedMonth] = useState(\r\n        JSON.parse(localStorage.getItem('WeCoSelectedMonth') || currentMonth));\r\n    const [weightData, setWeightData] = useState({});\r\n    const token = localStorage.getItem('token');\r\n    const handleSelectYear = (e) => {\r\n        setSelectedYear(Number(e.target.value));\r\n    };\r\n    const handleSelectMonth = (e) => {\r\n        setSelectedMonth(Number(e.target.value));\r\n    };\r\n    const fetchMonthlyWeightMemos = async() => {\r\n        try {\r\n            const response = await fetch(`http://127.0.0.1:8000/users/weight/list?year=${selectedYear}&month=${selectedMonth}`, {\r\n                headers: {'Authorization': `Bearer ${token}`},\r\n            });\r\n            if (!response.ok) throw new Error('グラフのデータ取得に失敗しました。');\r\n            const weightMap = {};\r\n            const data = await response.json();\r\n            data.forEach((item) => {\r\n                weightMap[item.day] = item.weight\r\n            });\r\n            setWeightData(weightMap);\r\n        } catch (error) {\r\n            alert(error.message);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className='weight-graph'>\r\n                <div className='select-year-month'>\r\n                    <select className='select-year' size='1' value={selectedYear} onChange={handleSelectYear}>\r\n                        {years.map((year) => (\r\n                            <option key={year} value={year}>{year}</option>\r\n                        ))}\r\n                    </select>\r\n                    <select className='select-month' size='1' value={selectedMonth} onChange={handleSelectMonth}>\r\n                        {months.map((month) => (\r\n                            <option key={month} value={month}>{month}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeightGraph"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}