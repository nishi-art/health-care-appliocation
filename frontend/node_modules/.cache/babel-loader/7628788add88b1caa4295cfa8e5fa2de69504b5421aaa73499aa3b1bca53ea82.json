{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayuto\\\\github\\\\health-care-application\\\\frontend\\\\src\\\\compornent\\\\HealthCare.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst HealthCare = () => {\n  _s();\n  const currentYear = new Date().getFullYear();\n  const currentMonth = new Date().getMonth() + 1;\n  const years = [currentYear + 1, currentYear, currentYear - 1, currentYear - 2];\n  const months = Array.from({\n    length: 12\n  }, (_, i) => i + 1);\n  const [selectedYear, setSelectedYear] = useState(JSON.parse(localStorage.getItem('seletedYear') || currentYear));\n  const [selectedMonth, setSelectedMonth] = useState(JSON.parse(localStorage.getItem('selectedMonth') || currentMonth));\n  const daysInMonth = new Date(selectedYear, selectedMonth, 0).getDate();\n  const firstDayOfWeek = new Date(selectedYear, selectedMonth - 1, 1).getDay();\n  const blanks = Array.from({\n    length: firstDayOfWeek\n  });\n  const [calenderData, setCalenderData] = useState({});\n  const token = localStorage.getItem('token');\n  const handleSelectYear = e => {\n    setSelectedYear(Number(e.target.value));\n  };\n  const handleSelectMonth = e => {\n    setSelectedMonth(Number(e.target.value));\n  };\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchMonthlyMemos = async () => {\n      try {\n        const response = fetch(`http://127.0.0.1:8000/users/healthcare/list?year=${selectedYear}&month=${selectedMonth}`, {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n        if (!response.ok) throw new Error('カレンダーのデータ取得に失敗しました。');\n        const data = await response.json();\n        setCalenderData(data);\n        console.log(calenderData);\n      } catch (error) {\n        alert(error.message);\n      }\n    };\n    fetchMonthlyMemos();\n    localStorage.setItem('selectedYear', JSON.stringify(selectedYear));\n    localStorage.setItem('selectedMonth', JSON.stringify(selectedMonth));\n  }, [selectedYear, selectedMonth]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"health-care\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select-year-month\",\n        children: [/*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"select-year\",\n          size: \"1\",\n          value: selectedYear,\n          onChange: handleSelectYear,\n          children: years.map(year => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: year,\n            children: year\n          }, year, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"select-month\",\n          size: \"1\",\n          value: selectedMonth,\n          onChange: handleSelectMonth,\n          children: months.map(month => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: month,\n            children: month\n          }, month, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calender\",\n        children: [blanks.map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"blank\"\n        }, `blank-${i}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this)), [...Array(daysInMonth)].map((_, i) => {\n          const dayOfWeek = (firstDayOfWeek + i) % 7;\n          let dayClass = 'day';\n          if (dayOfWeek === 0) dayClass += ' sunday';\n          if (dayOfWeek === 6) dayClass += ' saturday';\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: dayClass,\n            onClick: () => navigate(`/healthcare/${selectedYear}/${selectedMonth}/${i + 1}`),\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: i + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(HealthCare, \"Id9sr78vm6teTCBlSOQxj+id+mY=\", false, function () {\n  return [useNavigate];\n});\n_c = HealthCare;\nexport default HealthCare;\nvar _c;\n$RefreshReg$(_c, \"HealthCare\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","HealthCare","_s","currentYear","Date","getFullYear","currentMonth","getMonth","years","months","Array","from","length","_","i","selectedYear","setSelectedYear","JSON","parse","localStorage","getItem","selectedMonth","setSelectedMonth","daysInMonth","getDate","firstDayOfWeek","getDay","blanks","calenderData","setCalenderData","token","handleSelectYear","e","Number","target","value","handleSelectMonth","navigate","fetchMonthlyMemos","response","fetch","headers","ok","Error","data","json","console","log","error","alert","message","setItem","stringify","children","className","size","onChange","map","year","fileName","_jsxFileName","lineNumber","columnNumber","month","dayOfWeek","dayClass","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ayuto/github/health-care-application/frontend/src/compornent/HealthCare.js"],"sourcesContent":["import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst HealthCare = () => {\r\n    const currentYear = new Date().getFullYear();\r\n    const currentMonth = new Date().getMonth() + 1;\r\n    const years = [currentYear+1, currentYear, currentYear-1, currentYear-2];\r\n    const months = Array.from({length: 12}, (_,i)=>i+1);\r\n    const [selectedYear, setSelectedYear] = useState(\r\n        JSON.parse(localStorage.getItem('seletedYear') || currentYear));\r\n    const [selectedMonth, setSelectedMonth] = useState(\r\n        JSON.parse(localStorage.getItem('selectedMonth') || currentMonth));\r\n    const daysInMonth = new Date(selectedYear, selectedMonth, 0).getDate();\r\n    const firstDayOfWeek = new Date(selectedYear, selectedMonth -1 , 1).getDay();\r\n    const blanks = Array.from({length: firstDayOfWeek});\r\n    const [calenderData, setCalenderData] = useState({});\r\n    const token = localStorage.getItem('token');\r\n    const handleSelectYear = (e) => {\r\n        setSelectedYear(Number(e.target.value));\r\n    };\r\n    const handleSelectMonth = (e) => {\r\n        setSelectedMonth(Number(e.target.value));\r\n    };\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        const fetchMonthlyMemos = async() => {\r\n            try {\r\n                const response = fetch(`http://127.0.0.1:8000/users/healthcare/list?year=${selectedYear}&month=${selectedMonth}`, {\r\n                    headers: {'Authorization': `Bearer ${token}`}\r\n                });\r\n                if (!response.ok) throw new Error('カレンダーのデータ取得に失敗しました。');\r\n                const data = await response.json();\r\n                setCalenderData(data);\r\n                console.log(calenderData);\r\n            } catch (error) {\r\n                alert(error.message);\r\n            }\r\n        };\r\n        fetchMonthlyMemos();\r\n        localStorage.setItem('selectedYear', JSON.stringify(selectedYear));\r\n        localStorage.setItem('selectedMonth', JSON.stringify(selectedMonth));\r\n    }, [selectedYear, selectedMonth]);\r\n\r\n    return (\r\n        <>  \r\n            <div className='health-care'>\r\n                <div className='select-year-month'>\r\n                    <select className='select-year' size='1' value={selectedYear} onChange={handleSelectYear}>\r\n                        {years.map((year) => (\r\n                            <option key={year} value={year}>{year}</option>\r\n                        ))}\r\n                    </select>\r\n                    <select className='select-month' size='1' value={selectedMonth} onChange={handleSelectMonth}>\r\n                        {months.map((month) => (\r\n                            <option key={month} value={month}>{month}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className='calender'>\r\n                    {blanks.map((_, i) => (\r\n                        <div className='blank' key={`blank-${i}`}></div>\r\n                    ))}\r\n                    {[...Array(daysInMonth)].map((_, i) => {\r\n                        const dayOfWeek = (firstDayOfWeek + i) % 7;\r\n                        let dayClass = 'day';\r\n                        if (dayOfWeek === 0) dayClass += ' sunday';\r\n                        if (dayOfWeek === 6) dayClass += ' saturday';\r\n                        return (\r\n                            <div \r\n                                className={dayClass} \r\n                                onClick={() => navigate(`/healthcare/${selectedYear}/${selectedMonth}/${i + 1}`)}>\r\n                                <p>{i+1}</p>\r\n                            </div>\r\n                        )\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HealthCare"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}